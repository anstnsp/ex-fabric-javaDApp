plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
	id 'java'
}

group = 'kr.co.ex'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	// mavenLocal()

}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	// https://mvnrepository.com/artifact/org.hyperledger.fabric/fabric-gateway-java
	compile group: 'org.hyperledger.fabric', name: 'fabric-gateway-java', version: '1.4.5'
	compile group: 'org.hyperledger.fabric-sdk-java', name:'fabric-sdk-java', version: '1.4.11'
	// https://mvnrepository.com/artifact/net.rakugakibox.util/yaml-resource-bundle
	compile group: 'net.rakugakibox.util', name: 'yaml-resource-bundle', version: '1.1'
	// https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
	compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
	// compile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12'
	implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.4.1'
	// querydsl 
	implementation 'com.querydsl:querydsl-jpa'

}

test {
	useJUnitPlatform()
}

def projectDir = "$projectDir"
def dist = "dist"
def querydslDir = "$buildDir/generated/querydsl"

// querydsl Q-class 추가 코드 시작 
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

configurations {
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}



task compress(type: Copy, dependsOn: build) {
	println "### copyAfterBuild start ###"
	doFirst {
		println "### make product Directory ###"
		file(new File(projectDir, dist)).mkdirs()
		// tasks.build.execute()
	}
  println "### start copy files... ###"
	//jar 파일 복사.
  from 'build/libs/ex-corporation_DApp-master-0.0.1-SNAPSHOT.jar'
	//yaml파일들 복사. 
  from 'src/main/resources/application.yml'
	from 'src/main/resources/application-dev.yml'
	from 'src/main/resources/application-prod.yml'
	from 'src/main/resources/connection.yaml'
	from 'src/main/resources/fabricConfig.yaml'
	from 'src/main/resources/logback-spring.xml'
	//CA인증서 복사.
	from 'src/main/resources/rca.orgnaver.com-cert.pem'
	into  dist
	println "### end copy files... ###"

	doLast {
		println "### START compress product DIR to tar ###"
		// tasks.tar.execute()
	}
}

task tar(type: Tar, dependsOn: compress) {
	
	println "### tar start ###"
	from 'dist'

}

task copyTar(type: Copy, dependsOn: tar) {
	println "### START copyTar ###"
	from 'build/distributions/ex-corporation_DApp-master-0.0.1-SNAPSHOT.tar'
	into projectDir
	println "### END copyTar ###"
}
task afterClean(dependsOn: clean) {
	println "### start afterClean ###"
	file(new File(projectDir, dist)).deleteDir()
	file(new File(projectDir, 'ex-corporation_DApp-master-0.0.1-SNAPSHOT.tar')).delete()
}

task buildApp (dependsOn: copyTar)



